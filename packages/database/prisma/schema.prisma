// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  jobs          Job[] // Jobs posted by recruiters
  applications  Application[] // Applications submitted by job seekers

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Job {
  id                  String        @id @default(uuid())
  title               String
  company             String
  location            String
  description         String
  requirements        String
  salary              String?
  contactEmail        String
  yearsOfExperience   Int           @default(0)
  numberOfRoles       Int           @default(1)
  shortlistSize       Int           @default(5)
  applicationUrl      String?
  isRemote            Boolean       @default(false)
  applicationDeadline DateTime?
  isActive            Boolean       @default(true)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  expiresAt           DateTime?
  recruiterId         String
  recruiter           User          @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  applications        Application[]
  applicants          Json?
  topApplicants       String[]

  industry        String?
  jobType         String? // Full-time, Part-time, Contract, etc.
  experienceLevel String? // Entry-level, Mid-level, Senior, etc.

  @@map("job")
}

model Application {
  id          String   @id @default(uuid())
  status      String   @default("pending") // pending, reviewing, rejected, accepted
  coverLetter String?
  resumeUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobId       String
  job         Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantId String
  applicant   User   @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  notes         String? // Recruiter's notes about the application
  interviewDate DateTime?
  
  // Additional fields
  phoneNumber       String?
  linkedinProfile   String?
  portfolioWebsite  String?
  cvAnalysis        Json?   // Results from CV analysis

  @@unique([jobId, applicantId]) // Prevent duplicate applications
  @@map("application")
}
